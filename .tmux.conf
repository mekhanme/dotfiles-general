# http://man7.org/linux/man-pages/man1/tmux.1.html

# 🤖 == 🤖 == 🤖 == 🤖  general  🤖 == 🤖 == 🤖 == 🤖 #

# set-option -s detach-on-destroy off

bind-key C-0 command-prompt "new-session -s %1 ssh %1 \; set-option default-command \"ssh %1\""

set-option -g default-terminal "xterm-256color"
set-option -ga terminal-overrides ",xterm-256color:Tc"
# set-option -g terminal-overrides 'xterm*:smcup@:rmcup@'

set-option -g prefix2 M-e
bind-key M-e send-prefix -2
# unbind C-b
# set-option -g prefix "C-\\"

# don't suspend-client
unbind-key C-z

set-environment -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock


# bind-key -T root 'C-/' send-keys ' Msemicolon'

# bind-key -n 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"

# bind-key    -T prefix       T                     run-shell "/root/.tmux/plugins/tmux-sidebar/scripts/toggle.sh 'tree -C | sh -c \"LESS= less --dumb --chop-long-lines --tilde --IGNORE-CASE --RAW-CONTROL-CHARS\",left,40,focus' '#{pane_id}'"


# unbind f
# TODO: ERROR no buffer fzf2
# bind-key -n M-y run-shell 'tmux show-buffer -b fzf | tr -d "\n" | tmux load-buffer -b fzf2 - \; paste-buffer -b fzf2 \; delete-buffer -b fzf2'
# | tmux load-buffer -b fzf - | tmux paste-buffer -b fzf

### 🤖 >>= 🤖 >>= 🤖 >>= 🤖  display  🤖 =<< 🤖 =<< 🤖 =<< 🤖 ###

set-option -w -q -g utf8 on

set-option -g history-limit 50000

unbind-key M-m
# включить / отключить отображение активности в окне
bind-key M-m set-option -w monitor-activity
# \;\ display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'

bind-key M-b set-option -w monitor-bell
# \;\ display-message 'Monitor bell window activity [#{?monitor-bell,ON,OFF}]'

unbind-key M-n
# включить / отключить мониторинг неактивности в окне
bind-key M-n if -F '#{monitor-silence}' \
  'set-option -w monitor-silence 0' \
  'command-prompt -p "Monitor silence: interval (s): " "set-option -w monitor-silence %%"'
# ; display-message "Monitor window silence [OFF]"
# 'set-option -w monitor-silence 0' \

# tmux set-option -w monitor-silence 10 ; tmux display -p '#{monitor-silence}' ; tmux display -p '#{window_silence_flag}' ; tmux show-options -wg | grep monitor-silence

set-option -w -g pane-base-index 1
set-option -w -g base-index 1
set-option -g renumber-windows on

# 🤖 == 🤖 == 🤖 == 🤖  navigation  🤖 == 🤖 == 🤖 == 🤖 #

bind-key - split-window -v -c "#{pane_current_path}"
bind-key _ split-window -h -c "#{pane_current_path}"

bind-key > swap-pane -D
bind-key < swap-pane -U

bind-key e last-pane
bind-key M-e last-window

bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9
bind-key -n M-0 select-window -t 10

unbind-key w
bind-key w resize-pane -Z

# reload configuration
bind-key r source-file -q ~/.tmux.conf \; display '~/.tmux.conf sourced'


unbind-key c
# новое окно с той же рабочей директорией (cwd)
bind-key С new-window -c "#{pane_current_path}"
bind-key c new-window

#  Turn the mouse on, but without copy mode dragging
set-option -g mouse off
unbind-key m
bind-key m set mouse off
bind-key M set mouse on
unbind-key -n MouseDrag1Pane
unbind-key -T copy-mode MouseDrag1Pane

#  make scrolling with wheels work
# bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
# bind -n WheelDownPane select-pane -t= \; send-keys -M
#  A key to toggle between smallest and largest sizes if a window is visible in
#  multiple places
# bind F set -w window-size

# # [ Shift arrow ] переключение между окнами
# bind -n S-Left  previous-window
# bind -n S-Right next-window

# [ Shift arrow ] переключение между панелями
bind-key -n S-Left select-pane -L
bind-key -n S-Right select-pane -R
bind-key -n S-Up select-pane -U
bind-key -n S-Down select-pane -D

unbind M-Up
unbind M-Down
unbind M-Left
unbind M-Right
# [ Prefix Shift arrow ] изменение размера панели
bind-key S-Up resize-pane -U 5
bind-key S-Down resize-pane -D 5
bind-key S-Left resize-pane -L 5
bind-key S-Right resize-pane -R 5

# Link window
unbind-key L
bind-key L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Kill pane/window/session shortcuts
unbind-key X
bind-key x kill-pane
bind-key X kill-window
bind-key k kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
unbind-key C-u
bind-key C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
unbind-key D
bind-key D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# -- buffers -------------------------------------------------------------------

# [ Enter ] переключиться в copy mode
bind-key Enter copy-mode

# [ Space :: copy-mode ] выделить строку
bind-key -T copy-mode Space send-keys -X begin-selection \; send-keys C-a

# [ Enter :: copy-mode ] скопировать выделение в буфер и выйти из режима copy mode
bind-key -T copy-mode Enter send-keys -X copy-selection-and-cancel

# [ Alt - W :: copy-mode ] скопировать выделение в буфер X
bind-key -T copy-mode M-w send-keys -X copy-selection-and-cancel \; run-shell "tmux save-buffer - | xclip >/dev/null"

# [ Alt - PgUp ] скопировать строку в терминале
# не работает
# bind-key -n M-PPage send-keys C-a \; copy-mode \; send-keys -X copy-end-of-line

# TODO: сочетание не работает,починить
# bind-key -T copy-mode M-NPage send-keys -X next-paragraph
# bind-key -T copy-mode M-PPage send-keys -X previous-paragraph

bind-key b list-buffers  # list paste buffers
bind-key p paste-buffer  # paste from the top paste buffer
bind-key P choose-buffer # choose which buffer to paste from

# # Status line colours
# set-option -g status-left ""
# set-option -g status-style "bg=colour249"
# set -ag status-style "fg=black"
# set-option -g window-status-current-style "bg=green"
# set -ag window-status-current-style "fg=black"

# # Status items right side
# set-option -g status-interval 15
# set-option -g status-right '#[fg=yellow]#(cut -d " " -f 1 /proc/loadavg)#[default] #[fg=black]%H:%M#[default]'




### 🤖 >>= 🤖 >>= 🤖  appearence and status bar  🤖 =<< 🤖 =<< 🤖 ###

set-option -g status on
set-option -g status-interval 5
set-option -g status-position bottom
set-option -g status-justify centre
set-option -g status-left-length 100
set-option -g status-right-length 150

# #6a1b9a  #9c27b0  #80cbc4  #64b5f6

# цвет основной панели (посередине)
set-option -g status-style "bg=#6c6cd2,fg=#9c27b0"

# цвет и формат левой части панели
set-option -g status-left "\
#[fg=#80cbc4,bg=#6a1b9a,bold] \
$#S #[fg=#6a1b9a,bg=#9c27b0,nobold]#[fg=#80cbc4,bg=#9c27b0] \
@#I╳%%#P #[fg=#9c27b0,bg=#80cbc4] #[fg=#6a1b9a,bg=#80cbc4] \
#{?window_zoomed_flag,🔍,}#{?monitor-activity,👀,}#{?monitor-bell,👾,}#{?#{!=:#{monitor-silence},0},😺#{monitor-silence}s,} #{?client_prefix,💜, } \
#[fg=#80cbc4,bg=#6c6cd2,nobold]"
# #{prefix_highlight}"

# цвет и формат правой части панели
# set-option -g status-right "\
# #[fg=#80cbc4,bg=#6c6cd2]#[fg=#6c6cd2,bg=#80cbc4] \
# #[fg=#6c6cd2,bg=#80cbc4]\
# #{docker_status}\
# 🤖╳#[fg=#9c27b0]#(echo ${SSH_AGENT_ID} | sed 's/.*@//') #[fg=#6c6cd2]\
# #[fg=#9c27b0,bg=#80cbc4]#[fg=#80cbc4,bg=#9c27b0] \
# #{?#{>=:#{client_width},70},"...",#(date +"%H:%M")}<~#{?#{>=:#{client_width},70},"",#(date -I)} \
# #[fg=#6a1b9a,bg=#9c27b0]#[fg=#80cbc4,bg=#6a1b9a,bold] \
# #(wemux status_users) #H "


set-option -g status-right " \
#[fg=#80cbc4,bg=#6c6cd2]#[fg=#6c6cd2,bg=#80cbc4] \
#[fg=#6c6cd2,bg=#80cbc4] \
#{docker_status} \
#[fg=#9c27b0] \
#([ "${SSH_AGENT_ID}" = "/root/.ssh/id_rsa" ] && echo 🤖|| echo 🤖╳$(echo ${SSH_AGENT_ID} | sed 's/.*@//')) \
#[fg=#6c6cd2] \
#[fg=#9c27b0,bg=#80cbc4]#[fg=#80cbc4,bg=#9c27b0] \
#{?#{>=:#{client_width},70},"...",#(date +"%H:%M")}<~#{?#{>=:#{client_width},70},"",#(date -I)} \
#[fg=#6a1b9a,bg=#9c27b0]#[fg=#80cbc4,bg=#6a1b9a,bold] \
#(wemux status_users) #(/bin/bash $HOME/.tmux/kube-tmux/kube.tmux 250 red cyan) #H "

# #{sysstat_cpu}<>#{sysstat_mem}
# 🤖:[#(echo $SSH_AGENT_ID) \
# 🐳╳#[fg=#9c27b0]#(docker system info > /dev/null 2>&1 && docker system info --format '{{json .Name}}' | xargs || echo "error")
# 🔳
# #{package_updates} #{simple_git_status} #{ipinfo} #{uptime}
# #{free_mem} #{download_speed} #{upload_speed} #{net_speed} #{sysstat_cpu} #{sysstat_mem} #{sysstat_swap} #{sysstat_loadavg}
#

# https://github.com/jimeh/tmux-themepack
# https://github.com/powerline/powerline
# https://www.nordtheme.com/ports/tmux

# https://github.com/arl/tmux-gitbar
# git status --porcelain
# source-file "$HOME/.tmux-gitbar/tmux-gitbar.tmux"

### 🤖 >>= 🤖 >>= 🤖  window / pane options  🤖 =<< 🤖 =<< 🤖 ###

# автоматически переименовывать окно
set-option -w -g automatic-rename on
set-option -w -g automatic-rename-format "#{pane_current_command}"

#  Rather than constraining window size to the maximum size of any client
#  connected to the *session*, constrain window size to the maximum size of any
#  client connected to *that window*. Much more reasonable.
set-option -w -g aggressive-resize on

# формат отображения активного и неактивного окна в панели статуса
set-option -w -g window-status-current-format "    #[fg=#6c6cd2,bg=#64b5f6,nobold]#[fg=#9c27b0,nobold] 🔶#I#{?pane_in_mode,📎,}#{?window_zoomed_flag,🔍,}#{?window_bell_flag,👾,}#{?pane_dead,🙈,}::#W    #[fg=#6c6cd2,bg=#64b5f6]"
set-option -w -g window-status-format "    #[fg=#80cbc4] #{?window_last_flag,🔸,}#I#{?pane_in_mode,📎,}#{?window_zoomed_flag,🔍,}#{?window_activity_flag,👀,}#{?window_bell_flag,👾,}#{?window_silence_flag,😺,}#{?pane_dead,🙈,}::#W    "
# #{?window_activity_flag,👁‍🗨,}

# цвет bg предыдущего окна в панели статуса
set-option -w -g window-status-last-style "bg=default"

# разделитель между окнами в панели статуса
set-option -w -g window-status-separator ""

# цвет bg и fg окна при возникновении активности
set-option -w -g window-status-activity-style "bg=#6c6cd2,fg=#64b5f6"
set-option -w -g window-status-bell-style "bg=#6c6cd2,fg=#80cbc4"

# отображать дополнительную статусную панель
set-option -w -g pane-border-status bottom
set-option -w -g pane-border-format " #[fg=#80cbc4]::#[fg=default] #[fg=#64b5f6]#P#[fg=default] #{?pane_active,🔸,}#{?window_zoomed_flag,🔍,}#{?pane_in_mode,📎,}#{?selection_present,🔵,} #{pane_current_path}  #{pane_start_command}#[fg=#80cbc4]::#[fg=default] #[fg=#64b5f6]#{pane_current_command} #[fg=#80cbc4]::#[fg=default] #(gitmux -q -fmt tmux #{pane_current_path}) #[fg=#80cbc4]::#[fg=default] "
set-option -w -g pane-border-style "bg=default,fg=#80cbc4"
set-option -w -g pane-active-border-style "bg=default,fg=#6c6cd2"

# цвет сообщений
set-option -g message-style "bg=#9c27b0,fg=#80cbc4"
set-option -g message-command-style "bg=#9c27b0,fg=#80cbc4"

# цвет индикатора copy-mode в правом верхнем углу
set-option -g mode-style "bg=#9c27b0,fg=#80cbc4"


set-option -g set-titles on
# TODO:сделать хостнейм и разные значки для разных хостов
set-option -g set-titles-string '#H 👾 #S'

#  activity
# TODO:разобраться с этим

# контролировать активность в окне
set-option -w -g monitor-activity on
set-option -w -g monitor-bell off
set-option -w -g bell-action other


# позволить программам в панели устанавливать window name
set-option -g allow-rename on

# цвет bg и fg активной панели
set-option -g window-active-style "fg=default,bg=default"

# закрывать / не закрывать окно при завершении процесса
set-option -g remain-on-exit on

# цвет bg и fg панели
set-option -g window-style "fg=#eed9f2,bg=default"


### 🤖 >>= 🤖 >>= 🤖 >>= 🤖  session options  🤖 =<< 🤖 =<< 🤖 =<< 🤖 ###


# сигнализировать об активности сообщением
set-option -g visual-activity off
set-option -g visual-silence off
set-option -g silence-action other
# как обрабатывать активность в окнах
set-option -g activity-action other
set-option -g visual-bell on


### 🤖 >>= 🤖 >>= 🤖 >>= 🤖  server options  🤖 =<< 🤖 =<< 🤖 =<< 🤖 ###


set-option -g set-clipboard off

set-option -g display-panes-time 1000
set-option -g display-time 2000

# интервал обновления статусной панели
set-option -g status-interval 5

#TODO: сделать статус yadm
# #(yadm status --porcelain | awk '{ print $1 }')
# set -g status-right '#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)'
# set-option -g status-right "(yadm status)"


set-option -g update-environment \
  "DISPLAY\
  SSH_AGENT_ID\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

set-option -g update-environment -r

# нет файла
bind-key '$' run "~/.tmux/renew_env.sh"

unbind-key C-f
unbind-key C-n
unbind-key C-p
#TODO: добавить цвета
# [Ctrl f :: copy-mode] запустить поиск с конца буфера
bind-key -T copy-mode C-f command-prompt -i -I "#{pane_search_string}" -p "(search down)" "send -X search-forward-incremental \"%%%\""
# [Ctrl n :: copy-mode] искать с конца буфера
bind-key -T copy-mode C-n send-keys -X search-again
# [Ctrl p :: copy-mode] искать с начала буфера
bind-key -T copy-mode C-p send-keys -X search-reverse



# bind M-t split-window -h -c "#{pane_current_path}" ; resize-pane -Z ; run 'emacs -nw ~/.tmux.conf.local'
# Edit configuration and reload
# bind M-t new-window -n 'tmux.conf' "sh -c '\${EDITOR:-nano} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

unbind-key M-/
# bind -n M-/ run-shell /root/.tmux/plugins/tmux-copycat/scripts/copycat_search.sh

bind-key M-r new-window -n 'tmux.conf' "sh -c '\${EDITOR:-nano} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

unbind-key y
# TODO: разбить на 1. создание новой панели с цветом 2. выполнение команды в фоне
# 3. переключение на предыдущую панель 4. в фоне обновить конфиг и вывести если ошибка
# 5. закрыть, если статус выхода 0
bind-key y split-window -v -p 20 "yadm pull && tmux kill-pane " \;\
  set-option -pt:. window-style bg=magenta \;\
  source ~/.tmux.conf \; select-pane -l
bind-key Y split-window -v -p 15 "yadm nc && yadm push"
# #{pane_dead_status} kill-pane
# tmux set-option -pt:. window-style bg=magenta
# resize-pane -t 1 -U 20
# resize-pane -t 1 -y 5

#              remain-on-exit [on | off]
#  split-window [-dhvP] [-c start-directory] [-l size | -p percentage] [-t
#          target-pane] [shell-command] [-F format]
# $TMUX_PANE

########## NOTE: Send keys
#
# https://blog.damonkelley.me/2016/09/07/tmux-send-keys/#list-of-keys
#
# When specifying keys, most represent themselves (for example ‘A’ to ‘Z’). Ctrl keys may be prefixed with ‘C-’ or ‘^’, and Alt (meta) with ‘M-’. In addition, the following special key names are accepted: Up, Down, Left, Right, BSpace, BTab, DC (Delete), End, Enter, Escape, F1 to F20, Home, IC (Insert), NPage/PageDown/PgDn, PPage/PageUp/PgUp, Space, and Tab.
#
# Although they are not listed in the man page, there are also special names for keypad-specific keys: KP0 through KP9, KP/, KP*, KP-, KP+, KP., and KPEnter.
#
# Several of the more cryptic key names (BTab, IC, DC, NPage, PPage) probably come from the terminfo library.




# https://unix.stackexchange.com/questions/149606/how-do-i-create-a-simple-tmux-conf-that-splits-a-window
# mux $(basename $(pwd)) \
#   "vim $(find src test resources test-resources -type f 2>/dev/null \
#     | tr "\n" " ")" \
#   "lein repl"

# https://github.com/samoshkin/tmux-config/blob/master/tmux/renew_env.sh
# set -eu
# pane_fmt="#{pane_id} #{pane_in_mode} #{pane_input_off} #{pane_dead} #{pane_current_command}"
# tmux list-panes -s -F "$pane_fmt" | awk '
#   $2 == 0 && $3 == 0 && $4 == 0 && $5 ~ /(bash|zsh|ksh|fish)/ { print $1 }
# ' | while read -r pane_id; do
#   # renew environment variables according to update-environment tmux option
#   # also clear screen
#   tmux send-keys -t "$pane_id" 'Enter' 'eval "$(tmux show-env -s)"' 'Enter' 'C-l'
# done;



# # send tmux buffer to pastebin
# #bind-key P run-shell "tmux save-buffer - | wgetpaste | awk '/:/ {print \$NF}' | xargs -I@ xdg-open \"@\" >/dev/null"
# bind-key P run-shell "tmux save-buffer - | sheetpaste.sh | xargs -I@ xdg-open \"@\" >/dev/null"
# bind-key З run-shell "tmux save-buffer - | sheetpaste.sh | xargs -I@ xdg-open \"@\" >/dev/null"



# Примеры
## https://github.com/seamus-45/dotfiles/blob/master/.tmux.conf

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"

# bind-key -n S-Up command-prompt -I '#W' "rename-window '%%'"

# tmux prefix key
# set-option -g prefix M-`
# set-option -g prefix2 M-ё
# bind-key M-` send-prefix
# bind-key M-ё send-prefix -2

# # Smart pane switching with awareness of vim splits
# # See: https://github.com/christoomey/vim-tmux-navigator
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# пример бинда нескольких действий на клавишу
bind -T root F12  \
  set status-right "#{sysstat_cpu} | #{sysstat_mem} | #{sysstat_swap} | #{sysstat_loadavg} | #[fg=cyan]#(echo $USER)#[default]@#H" \;\
  if -F '#{pane_in_mode}' 'send-keys -X' \;\
  refresh-client -S \;\

# bind -T copy-mode-vi Escape if-shell -F '#{selection_present}' \
#                                         'send-keys -X clear-selection' \
#                                         'send-keys -X cancel'

# wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo ' OFF ')#[default]"
# set -g status-style right "$wg_is_keys_off#[fg=black,bg=cyan] #(curl https://am.i.mullvad.net/country) " # (#(curl https://am.i.mullvad.net/city))


### 🤖 >>= 🤖 >>= 🤖  configs and examples  🤖 =<< 🤖 =<< 🤖 ###

# Книжка
# https://leanpub.com/the-tao-of-tmux/read#scripting-tmux

# Интересный конфиг,про мышь
# https://github.com/kaushalmodi/dotfiles/blob/master/tmux/dot-tmux.conf

# Пример отображения погоды в строке статуса
  # https://github.com/chubin/wttr.in
  # WEATHER='#(curl -s wttr.in/London:Stockholm:Moscow\?format\="%%l:+%%c%%20%%t%%60%%w&period=60")'
  # set -g status-right "$WEATHER ..."

# Пример условий
  # %if #{==:#{host},nb5} set-option -pt:. window-style bg=magenta %endif

  #  bind x if-shell "true" {
  #      if-shell "true" {
  #           display "true!"
  #      }
  #  }

  #  %if "#{==:#{host},myhost}"
  #  set -g status-style bg=red
  #  %elif "#{==:#{host},myotherhost}"
  #  set -g status-style bg=green
  #  %else
  #  set -g status-style bg=blue
  #  %endif

# Послать одинаковую команду во все панели всех окон
  # https://scripter.co/command-to-every-pane-window-session-in-tmux/
  # bind E command-prompt -p "Command:" \
  #        "run \"tmux list-panes -a -F '##{session_name}:##{window_index}.##{pane_index}' \
  #               | xargs -I PANE tmux send-keys -t PANE '%1' Enter\""

# Умное управление переключением панелей,используя другие сочетания клавиш, когда запущена определённая программа
# See: https://github.com/christoomey/vim-tmux-navigator
  # is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
  # bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
  # bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
  # bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
  # bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
  # bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# TODO: сделать выбор окна с FZF
# bind   W split-window "tmux lsw | peco --initial-index `tmux lsw | awk '/active.$/ {print NR-1}'` | cut -d':' -f 1 | xargs tmux select-window -t"
# switch to another session by name
# bind   S split-window "tmux ls | peco --initial-index `tmux ls | awk '/attached.$/ {print NR-1}'` | cut -d':' -f 1 | xargs tmux switch-client -t"
# # switch to ANY window in ANY session by name
# bind   s split-window "tmux ls | cut -d: -f1 | xargs -I SESSION tmux lsw -F 'SESSION:#{window_name}' -t SESSION | peco --initial-index `tmux ls | cut -d: -f1 | xargs -I SESSION tmux lsw -F '___#{session_attached}#{window_active}___' -t SESSION | awk '/___11___/ {print NR-1}'` | xargs tmux switch-client -t"

bind-key C-Space set-option -g pane-border-status off

# [ Alt - w ]скопировать содержимое буфера tmux в буфер X
# bind -n M-w run-shel  l -b "tmux show-buffer | xclip -i -sel pri && tmux show-buffer | xclip -i -sel cli"

# загрузить содержимое буфера X в буфер tmux и вставить в терминал
bind-key C-y run-shel -b "xclip -o -sel pri | tmux load-buffer - && tmux paste-buffer -s ' '"

# bind-key = set-option synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# [ Prefix = ] выделить панель красным при включении синхронизации
bind-key = if -F '#{pane_synchronized}' \
  'setw synchronize-panes off; \
    setw pane-active-border-style "bg=default,fg=#64b5f6"; \
    setw pane-border-format " #P :: #T "' \
  'setw synchronize-panes on; \
    setw pane-active-border-style "fg=#f11e1e"; \
    setw pane-border-format " #P - Pane Synchronization ON "'

# https://github.com/arl/tmux-gitbar
# не работает
# TMUX_GITBAR_DIR="~/.tmux/.tmux-gitbar"
# TMGB_STATUS_STRING="#{git_branch} - #{git_upstream} - #{git_remote} #{git_flags}"
# TMGB_STATUS_LOCATION='right'
# TMGB_STYLE='bg=black,fg=white,bright'
# source-file "~/.tmux/.tmux-gitbar/tmux-gitbar.tmux"


	# assert "$(cat $tmp/file1)" "waiting"
	# tmux send-keys -t $tsession:0 "xyz" C-m ; zz
	# assert "$(cat $tmp/file1)" "waiting"
	# tmux send-keys -t $tsession:0 " " ; zz
	# assert "$(cat $tmp/file1)" "finished"
	# tmux send-keys -t $tsession:0 "q" ; zz
	# tmux kill-session -t $tsession

# bind -T root F12  \
#   if -F '#{pane_in_mode}' 'send-keys -X' \;\
#   refresh-client -S \;\

  # bind M-t split-window -h -c "#{pane_current_path}" ; resize-pane -Z ; run 'emacs -nw ~/.tmux.conf.local'

  # bind-key y split-window -v -p 20 "yadm pull" \; source ~/.tmux.conf \; select-pane -l

  # bind   W split-window "tmux lsw | peco --initial-index `tmux lsw | awk '/active.$/ {print NR-1}'` | cut -d':' -f 1 | xargs tmux select-window -t"

# if-shell 'test -n "$SSH_CLIENT"' \   'source-file ~/.tmux/tmux.remote.conf'

# не работает
# %if "#{==:#{host},nb}" rename-session -t 0 WSL %endif
# %if "#{==:#{host},nb5}" rename-session -t 0 WSL %endif
# %if "#{==:#{host},dk}" run-shell 'tmux rename-session dk' %endif

# tmux lsw -F "#{window_active} #{window_layout}" | grep "^1" | cut -d " " -\f2
# tmux select-layout "f336,144x39,0,0{72x39,0,0,0,71x39,73,0[71x19,73,0,1,71x19,73,20,2]}"
# tmux list-panes -F "#{pane_id} #{pane_current_command} #{pane_current_path} #{cursor_x},#{cursor_y}"

bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

bind-key M-r respawn-pane -k
# tmux set -g remain-on-exit on

unbind-key -T copy-mode  M-1
unbind-key -T copy-mode  M-2
unbind-key -T copy-mode  M-3
unbind-key -T copy-mode  M-4
unbind-key -T copy-mode  M-5
unbind-key -T copy-mode  M-6
unbind-key -T copy-mode  M-7
unbind-key -T copy-mode  M-8
unbind-key -T copy-mode  M-9


### 🤖 >>= 🤖 >>= 🤖  custom functions  🤖 =<< 🤖 =<< 🤖 ###

# [ Prefix Alt - s ] открыть новое окно с ssh
# TODO: сделать с выбором FXF
bind-key M-s command-prompt -p "👤 SSH host ==>" -I "px.rwxrwxrwx.dev" "new-window -n %1 'ssh %1'"

# [ Prefix Alt - w ] открыть новое окно с watch
bind-key M-w command-prompt -p "🕔 <|watch|> (sec) ==>,🕔 <|watch|> (command) ==>" -I "1," "split-window -v -c '#{pane_current_path}' -p 30 'watch -c -n %1 -x %2'"

# [ Prefix Alt - t ] открыть новое окно с man
bind-key M-t set-option -g remain-on-exit off \; command-prompt -p "🐸 man ==>" "new-window -n 'man %1' 'tldr %1' \; split-window -h -p 70 'PAGER=most man %1'" \; set-option remain-on-exit on

# [ Prefix Alt - y ] открыть новое окно с youtube-dl
bind-key M-y command-prompt -p "🔗 <|youtube-dl|> URL ==>,🔗 <|youtube-dl|> Select category (tech/mtb/diy) ==>" -I ",in" "new-window -n 'youtube-dl' 'youtube-dl --all-subs --output /mnt/ds/Video/youtube/%2/%\\(upload_date\\)s-%\\(title\\)s.%\\(ext\\)s %1'"

bind -T root F12  \
  set status-right "#{sysstat_cpu} | #{sysstat_mem} | #{sysstat_swap} | #{sysstat_loadavg} | #[fg=cyan]#(echo $USER)#[default]@#H" \;\
  if -F '#{pane_in_mode}' 'send-keys -X' \;\
  refresh-client -S \;\

# TODO: сделать entr, с FZF
# http://eradman.com/entrproject/
bind -n F10 \
	split-window -h -c "#{pane_current_path}" \;\
  send-keys "ls $tmp/file2 | ./entr -p cp $tmp/file2 $tmp/file1" C-m ;

# ls -d /tmp/file1 /tmp/file2 | entr -c colordiff /tmp/file1 /tmp/file2
# find . -print | grep -i '.*[.]go' | entr -c go test ./...
# if command -v entr > /dev/null; then find . -print | grep -i '.*[.]go' | \
  # entr -c go test ./...; else go test ./...; echo "\nInstall entr(1) to \"
  # echo "run tasks when files change. \nSee http://entrproject.org/"; fi

# TODO: сделать вторую панель с инфо, не работает правильно
# https://www.freecodecamp.org/news/tmux-in-practice-local-and-nested-remote-tmux-sessions-4f7ba5db8795/
bind -n F9 if -F "#{==:#{status},on}" \
  "set-option -g status 2; \
    set-option -g status-format[1] '#[fg=#80cbc4,bg=#6a1b9a,bold] 👽 #{free_mem} #{download_speed} #{upload_speed} #{net_speed} #{sysstat_cpu} #{sysstat_mem} #{sysstat_swap} #{sysstat_loadavg}'" \
  "set-option -g status on"
	# status-format[1] "#[align=left range=left #{status-left-style}]#{T;=/#{status-left-length}:status-left}#[norange default]#[list=on align=#{status-justify}]#[list=left-marker]<#[list=right-marker]>#[list=on]#{W:#[range=window|#{window_index} #{window-status-style}#{?#{&&:#{window_last_flag},#{!=:#{window-status-last-style},default}}, #{window-status-last-style},}#{?#{&&:#{window_bell_flag},#{!=:#{window-status-bell-style},default}}, #{window-status-bell-style},#{?#{&&:#{||:#{window_activity_flag},#{window_silence_flag}},#{!=:#{window-status-activity-style},default}}, #{window-status-activity-style},}}]#{T:window-status-format}#[norange default]#{?window_end_flag,,#{window-status-separator}},#[range=window|#{window_index} list=focus #{?#{!=:#{window-status-current-style},default},#{window-status-current-style},#{window-status-style}}#{?#{&&:#{window_last_flag},#{!=:#{window-status-last-style},default}}, #{window-status-last-style},}#{?#{&&:#{window_bell_flag},#{!=:#{window-status-bell-style},default}}, #{window-status-bell-style},#{?#{&&:#{||:#{window_activity_flag},#{window_silence_flag}},#{!=:#{window-status-activity-style},default}}, #{window-status-activity-style},}}]#{T:window-status-current-format}#[norange list=on default]#{?window_end_flag,,#{window-status-separator}}}#[nolist align=right range=right #{status-right-style}]#{T;=/#{status-right-length}:status-right}#[norange default]"


### 🤖 >>= 🤖 >>= 🤖 >>= 🤖  plugins  🤖 =<< 🤖 =<< 🤖 =<< 🤖 ###

# https://github.com/tmux-plugins/tpm
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

set-option -g @plugin 'tmux-plugins/tpm'

# https://github.com/tmux-plugins/tmux-resurrect
set-option -g @plugin 'tmux-plugins/tmux-resurrect'
# пытаться восстановить содержимое панелей
# set-option -g @resurrect-capture-pane-contents 'on'
# multitail -R 2 -l "netstat -t" -l "tail -f /var/lib/docker/volumes/traefik_logs/_data/traefik.log"
# ~/.tmux/resurrect/last
# set-option -g @resurrect-processes '~multitail "~log"'
# set-option -g @resurrect-processes 'mosh-client'

# https://github.com/tmux-plugins/tmux-continuum
set-option -g @plugin 'tmux-plugins/tmux-continuum'
# автоматически восстанавливать последнее сохранённое окружение при старте tmux
# set-option -g @continuum-restore 'on'
# интервал сохранения окружения (default 15)
set-option -g @continuum-save-interval '15'

set-option -g @plugin 'tmux-plugins/tmux-logging'

# set-option -g @plugin 'tmux-plugins/tmux-copycat'

# https://github.com/tmux-plugins/tmux-prefix-highlight
set-option -g @plugin 'tmux-plugins/tmux-prefix-highlight'
# set-option -g @prefix_highlight_empty_prompt '💜'
set-option -g @prefix_highlight_prefix_prompt '💙'
set-option -g @prefix_highlight_copy_prompt '💜'
set-option -g @prefix_highlight_empty_attr 'fg=default,bg=#6c6cd2'
set-option -g @prefix_highlight_fg "#6a1b9a"
set-option -g @prefix_highlight_bg "#6c6cd2"
set-option -g @prefix_highlight_show_copy_mode 'on'
set-option -g @prefix_highlight_copy_mode_attr "fg=#6a1b9a,bg=#6c6cd2"

set-option -g @plugin 'tmux-plugins/tmux-online-status'

set-option -g @plugin 'tmux-plugins/tmux-sidebar'
set-option -g @sidebar-tree 't'
set-option -g @sidebar-tree-focus 'T'
set-option -g @sidebar-tree-command 'tree -C'

# https://github.com/kristijanhusak/tmux-simple-git-status
# не работает
set-option -g @plugin 'kristijanhusak/tmux-simple-git-status'

# run-shell ~/tmux-sidebar-plus/sidebar-plus.tmux
# set-option -g @sidebar-plus-sidebar-key 'M-r'

# https://github.com/knakayama/tmux-newline-detector
set-option -g @plugin knakayama/tmux-newline-detector

# https://github.com/laktak/extrakto
set-option -g @plugin 'laktak/extrakto'

# https://github.com/jimeh/tmux-themepack
# set-option -g @plugin 'jimeh/tmux-themepack'
# set-option -g @themepack 'powerline/double/magenta'
# set-option -g @themepack 'powerline/double/blue'

# https://github.com/odedlaz/tmux-status-variables
set-option -g @plugin "odedlaz/tmux-status-variables"
# директория с пользовательскими скриптами
set-option -g @user_scripts_dir "~/.scripts"
# формат вывода ipinfo
set-option -g @ipinfo_format "#hostname #city #region #location"

# https://github.com/beeryardtech/tmux-net-speed
set-option -g @plugin "tmux-plugins/tmux-net-speed"
set-option -g @net_speed_interfaces "eth0"
set-option -g @download_speed_format "%10s"
set-option -g @upload_speed_format "%10s"
set-option -g @net_speed_format "D:%10s U:%10s"

# https://github.com/eugene-eeo/tmux-badges
set-option -g @plugin "eugene-eeo/tmux-badges"
set-option -g @badge_docker "🐳:"
set-option -g @badge_docker_fg "#6a1b9a"
set-option -g @badge_docker_bg "#6c6cd2"
set-option -g @badge_docker_secondary_fg "#6a1b9a"
set-option -g @badge_docker_secondary_bg "#6c6cd2"
set-option -g @badge_docker_fmt "#(docker system info --format '{{json .Name}}' | xargs)"
set-option -g @badge_yadm "🍀:"
set-option -g @badge_yadm_fg "#6a1b9a"
set-option -g @badge_yadm_bg "#6c6cd2"
set-option -g @badge_yadm_secondary_fg "#6a1b9a"
set-option -g @badge_yadm_secondary_bg "#6c6cd2"
set-option -g @badge_yadm_fmt "#(yadm status --porcelain | awk '{ print $1 }')"

# https://github.com/samoshkin/tmux-plugin-sysstat
set-option -g @plugin 'samoshkin/tmux-plugin-sysstat'
set-option -g @sysstat_cpu_view_tmpl '#[fg=#{cpu.color3}]CPU:#[default]#[fg=#{cpu.color},bg=#{cpu.color2}]#{cpu.pused}#[default]'
set-option -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.used}#[default]/#{mem.total}'
set-option -g @sysstat_cpu_color_low "$color_level_ok default default"
set-option -g @sysstat_cpu_color_medium "$color_level_warn default default"
set-option -g @sysstat_cpu_color_stress "white,bold $color_level_stress $color_level_stress"
set-option -g @sysstat_mem_color_low "$color_level_ok"
set-option -g @sysstat_mem_color_medium "$color_level_warn"
set-option -g @sysstat_mem_color_stress "$color_level_stress"

# TODO: проверить с подключённым docker host
# Get https://192.168.88.130:2376/v1.40/containers/json: x509: certificate is valid for 127.0.0.1, ::1, not 192.168.88.130
# "tlscacert": "/root/dev/.docker/ut/ca.pem"
set-option -g @plugin stonevil/tmux-docker-status
set -g @docker_icon "DOCKER CONTAINERS"

# https://github.com/tmux-plugins/tmux-open
set -g @plugin 'tmux-plugins/tmux-open'
# переназначить клавишу открытия ссылки system default file viewer (default 'o')
set-option -g @open 'o'
# переназначить клавишу открытия ссылки $EDITOR (default 'C-o')
set-option -g @open 'C-o'
# поменять поисковый движок (default 'https://www.google.com/search?q=')
set-option -g @open-S 'https://www.google.com/search?q='
# назначить клавишу поиска через другой поисковый движок [ Shift - s :: copy-mode ]
set-option -g @open-B 'https://www.duckduckgo.com/'


# # online and offline icon for tmux-online-status
# set-option -g @online_icon "#[fg=$color_level_ok]●#[default]"
# set-option -g @offline_icon "#[fg=$color_level_stress]●#[default]"

# https://github.com/charlietag/tmux-split-statusbar
# set -g @plugin 'charlietag/tmux-split-statusbar'
# set -g @split-statusbar-bindkey '-n F11'
# set -g @split-status-hide-bindkey '-n F12'

if "[ ! -d ~/.tmux/plugins/tpm ]" \
  "split-window -h -p 40 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"
  # \; source ~/.tmux.conf \; select-pane -l
  # "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize TMUX plugin manager 🤞
run-shell -b '~/.tmux/plugins/tpm/tpm'